{"ast":null,"code":"import { serverIpAddress } from './../constanst';\n\nconst _require = require('./networking'),\n      axios = _require.axios;\n\nexport function login(number, passcode, callback) {\n  const url = \"\".concat(serverIpAddress, \"api/users/staffs/login\");\n  axios.post(url, {\n    number,\n    passcode,\n    platform: 'web-app-cashier'\n  }).then(res => {\n    console.log(res);\n    callback({\n      status: true,\n      data: res.data\n    });\n  }).catch(e => {\n    console.log(e.response);\n    const msg = e.response !== undefined ? e.response.data.msg : 'ไม่สามารถเชื่อมต่อกับเซิฟเวอร์ได้';\n    callback({\n      status: false,\n      msg\n    });\n  });\n}\nexport const logout = id => {\n  const url = \"\".concat(serverIpAddress, \"api/users/staffs/logout\");\n  axios.post(url, {\n    id\n  }).then();\n};\nexport const resetTableNUser = (user_id, passcode, callback) => {\n  var url = \"\".concat(serverIpAddress, \"api/users/staffs/reset-signed-in\");\n  axios.post(url, {\n    user_id,\n    passcode\n  }).then(response => {\n    if (response.data.status) {\n      url = \"\".concat(serverIpAddress, \"api/restaurant/tables/tables/reset-status\");\n      axios.post(url, {\n        user_id,\n        passcode\n      }).then(response => {\n        if (response.data.status) {\n          callback(true, 'สถานะของผู้ใช้และโต๊ะถูกรีเซ็ทแล้ว');\n        } else {\n          callback(false, response.data.msg || 'เกิดข้อผิดพลาด');\n        }\n      }).catch(eroor => {\n        console.log(eroor);\n        callback(false, 'เกิดข้อผิดพลาด');\n      });\n    } else {\n      callback(false, response.data.msg || 'เกิดข้อผิดพลาด');\n    }\n  }).catch(eroor => {\n    console.log(eroor);\n    callback(false, 'เกิดข้อผิดพลาด');\n  });\n};","map":{"version":3,"sources":["/home/olotem321/jep-cashier-2021-2/src/brains/user.js"],"names":["serverIpAddress","require","axios","login","number","passcode","callback","url","post","platform","then","res","console","log","status","data","catch","e","response","msg","undefined","logout","id","resetTableNUser","user_id","eroor"],"mappings":"AACA,SAASA,eAAT,QAA+B,gBAA/B;;iBAEkBC,OAAO,CAAC,cAAD,C;MAAjBC,K,YAAAA,K;;AAER,OAAO,SAASC,KAAT,CAAeC,MAAf,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA0C;AAC/C,QAAMC,GAAG,aAAOP,eAAP,2BAAT;AACAE,EAAAA,KAAK,CAACM,IAAN,CAAWD,GAAX,EAAgB;AAAEH,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBI,IAAAA,QAAQ,EAAE;AAA9B,GAAhB,EACGC,IADH,CACSC,GAAD,IAAS;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAL,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,MAAM,EAAE,IADD;AAEPC,MAAAA,IAAI,EAAEJ,GAAG,CAACI;AAFH,KAAD,CAAR;AAID,GAPH,EAOKC,KAPL,CAOWC,CAAC,IAAI;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAYI,CAAC,CAACC,QAAd;AACA,UAAMC,GAAG,GAAGF,CAAC,CAACC,QAAF,KAAeE,SAAf,GAA2BH,CAAC,CAACC,QAAF,CAAWH,IAAX,CAAgBI,GAA3C,GAAiD,mCAA7D;AACAb,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,MAAM,EAAE,KADD;AAEPK,MAAAA;AAFO,KAAD,CAAR;AAID,GAdH;AAeD;AAED,OAAO,MAAME,MAAM,GAAIC,EAAD,IAAQ;AAC5B,QAAMf,GAAG,aAAOP,eAAP,4BAAT;AACAE,EAAAA,KAAK,CAACM,IAAN,CAAWD,GAAX,EAAgB;AAACe,IAAAA;AAAD,GAAhB,EAAsBZ,IAAtB;AACD,CAHM;AAKP,OAAO,MAAMa,eAAe,GAAG,CAACC,OAAD,EAAUnB,QAAV,EAAoBC,QAApB,KAAiC;AAC9D,MAAIC,GAAG,aAAOP,eAAP,qCAAP;AACAE,EAAAA,KAAK,CAACM,IAAN,CAAWD,GAAX,EAAgB;AAACiB,IAAAA,OAAD;AAAUnB,IAAAA;AAAV,GAAhB,EAAqCK,IAArC,CAA2CQ,QAAD,IAAc;AACtD,QAAGA,QAAQ,CAACH,IAAT,CAAcD,MAAjB,EAAwB;AACtBP,MAAAA,GAAG,aAAOP,eAAP,8CAAH;AACAE,MAAAA,KAAK,CAACM,IAAN,CAAWD,GAAX,EAAgB;AAACiB,QAAAA,OAAD;AAAUnB,QAAAA;AAAV,OAAhB,EAAqCK,IAArC,CAA2CQ,QAAD,IAAc;AACtD,YAAGA,QAAQ,CAACH,IAAT,CAAcD,MAAjB,EAAwB;AACtBR,UAAAA,QAAQ,CAAC,IAAD,EAAO,oCAAP,CAAR;AACD,SAFD,MAEK;AACHA,UAAAA,QAAQ,CAAC,KAAD,EAAQY,QAAQ,CAACH,IAAT,CAAcI,GAAd,IAAqB,gBAA7B,CAAR;AACD;AACF,OAND,EAMGH,KANH,CAMSS,KAAK,IAAI;AAChBb,QAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAnB,QAAAA,QAAQ,CAAC,KAAD,EAAQ,gBAAR,CAAR;AACD,OATD;AAUD,KAZD,MAYK;AACHA,MAAAA,QAAQ,CAAC,KAAD,EAAQY,QAAQ,CAACH,IAAT,CAAcI,GAAd,IAAqB,gBAA7B,CAAR;AACD;AACF,GAhBD,EAgBGH,KAhBH,CAgBSS,KAAK,IAAI;AAChBb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAnB,IAAAA,QAAQ,CAAC,KAAD,EAAQ,gBAAR,CAAR;AACD,GAnBD;AAoBD,CAtBM","sourcesContent":["\r\nimport  {serverIpAddress} from './../constanst';\r\n\r\nconst { axios } = require('./networking');\r\n\r\nexport function login(number, passcode, callback){\r\n  const url = `${ serverIpAddress }api/users/staffs/login`;\r\n  axios.post(url, { number, passcode, platform: 'web-app-cashier' })\r\n    .then((res) => {\r\n      console.log(res);\r\n      callback({\r\n        status: true,\r\n        data: res.data\r\n      });\r\n    }).catch(e => {\r\n      console.log(e.response);\r\n      const msg = e.response !== undefined ? e.response.data.msg : 'ไม่สามารถเชื่อมต่อกับเซิฟเวอร์ได้' ;\r\n      callback({\r\n        status: false,\r\n        msg\r\n      });\r\n    });\r\n}\r\n\r\nexport const logout = (id) => {\r\n  const url = `${ serverIpAddress }api/users/staffs/logout`;\r\n  axios.post(url, {id}).then();\r\n}\r\n\r\nexport const resetTableNUser = (user_id, passcode, callback) => {\r\n  var url = `${ serverIpAddress }api/users/staffs/reset-signed-in`;\r\n  axios.post(url, {user_id, passcode}).then((response) => {\r\n    if(response.data.status){\r\n      url = `${ serverIpAddress }api/restaurant/tables/tables/reset-status`;\r\n      axios.post(url, {user_id, passcode}).then((response) => {\r\n        if(response.data.status){\r\n          callback(true, 'สถานะของผู้ใช้และโต๊ะถูกรีเซ็ทแล้ว');\r\n        }else{\r\n          callback(false, response.data.msg || 'เกิดข้อผิดพลาด');\r\n        }\r\n      }).catch(eroor => {\r\n        console.log(eroor);\r\n        callback(false, 'เกิดข้อผิดพลาด');\r\n      });\r\n    }else{\r\n      callback(false, response.data.msg || 'เกิดข้อผิดพลาด');\r\n    }\r\n  }).catch(eroor => {\r\n    console.log(eroor);\r\n    callback(false, 'เกิดข้อผิดพลาด');\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}