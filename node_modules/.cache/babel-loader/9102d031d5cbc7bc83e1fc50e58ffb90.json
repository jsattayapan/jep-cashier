{"ast":null,"code":"import io from 'socket.io-client';\nimport { serverIpAddress } from './../constanst';\nimport { getTables, getCurrentShift, getHistrotyTable } from './tables';\nimport { store } from './../App';\nimport { loadTables, setSectionTables, setCurrentShift, setHistoryTables } from './../Redux/actions/tables';\nimport { getTablesBySection } from './../Redux/selectors/tables';\nimport { loadCookingFoodItems, loadCompleteFoodItems } from './../Redux/actions/foodItems';\nimport { getCookingFoods, getCompleteFoods } from './foodItems';\nexport const initialSocket = userId => {\n  const socket = io.connect(serverIpAddress, {\n    transports: [\"websocket\"],\n    upgrade: false\n  });\n  socket.emit('setUserId', userId);\n  socket.on('tableUpdate', () => {\n    console.log('Talbe Updating');\n    getTables(data => {\n      store.dispatch(loadTables(data));\n      store.dispatch(setSectionTables(getTablesBySection(data, store.getState().tables.sectionTables[0].section)));\n    });\n  });\n  socket.on('error', function (err) {\n    console.log(err);\n  });\n  socket.on('shiftUpdate', () => {\n    getCurrentShift(status => {\n      store.dispatch(setCurrentShift(status));\n    });\n  });\n  socket.on('historyTablesUpdate', () => {\n    getHistrotyTable(tables => {\n      store.dispatch(setHistoryTables(tables));\n    });\n  });\n  socket.on('updateOrders', () => {\n    getCookingFoods(data => {\n      store.dispatch(loadCookingFoodItems(data));\n      getCompleteFoods(data => {\n        store.dispatch(loadCompleteFoodItems(data));\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/home/olotem321/jep-cashier-2021-2/src/brains/socket.js"],"names":["io","serverIpAddress","getTables","getCurrentShift","getHistrotyTable","store","loadTables","setSectionTables","setCurrentShift","setHistoryTables","getTablesBySection","loadCookingFoodItems","loadCompleteFoodItems","getCookingFoods","getCompleteFoods","initialSocket","userId","socket","connect","transports","upgrade","emit","on","console","log","data","dispatch","getState","tables","sectionTables","section","err","status"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,SAAUC,eAAV,QAAiC,gBAAjC;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,gBAArC,QAA6D,UAA7D;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,eAAvC,EAAwDC,gBAAxD,QAAgF,2BAAhF;AAEA,SAASC,kBAAT,QAAmC,6BAAnC;AAEA,SAAQC,oBAAR,EAA8BC,qBAA9B,QAA0D,8BAA1D;AACA,SAAQC,eAAR,EAAyBC,gBAAzB,QAAgD,aAAhD;AAEA,OAAO,MAAMC,aAAa,GAAIC,MAAD,IAAY;AACvC,QAAMC,MAAM,GAAGjB,EAAE,CAACkB,OAAH,CAAWjB,eAAX,EAA4B;AAACkB,IAAAA,UAAU,EAAE,CAAC,WAAD,CAAb;AAA4BC,IAAAA,OAAO,EAAE;AAArC,GAA5B,CAAf;AACAH,EAAAA,MAAM,CAACI,IAAP,CAAY,WAAZ,EAAyBL,MAAzB;AAEAC,EAAAA,MAAM,CAACK,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAtB,IAAAA,SAAS,CAAEuB,IAAD,IAAU;AAClBpB,MAAAA,KAAK,CAACqB,QAAN,CAAepB,UAAU,CAACmB,IAAD,CAAzB;AACApB,MAAAA,KAAK,CAACqB,QAAN,CAAenB,gBAAgB,CAC7BG,kBAAkB,CAACe,IAAD,EAAOpB,KAAK,CAACsB,QAAN,GAAiBC,MAAjB,CAAwBC,aAAxB,CAAsC,CAAtC,EAAyCC,OAAhD,CADW,CAA/B;AAGD,KALQ,CAAT;AAMD,GARD;AAUEb,EAAAA,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,UAAUS,GAAV,EAAe;AAC9BR,IAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACH,GAFD;AAIFd,EAAAA,MAAM,CAACK,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC7BnB,IAAAA,eAAe,CAAE6B,MAAD,IAAY;AAC1B3B,MAAAA,KAAK,CAACqB,QAAN,CAAelB,eAAe,CAACwB,MAAD,CAA9B;AACD,KAFc,CAAf;AAGD,GAJD;AAMAf,EAAAA,MAAM,CAACK,EAAP,CAAU,qBAAV,EAAiC,MAAM;AACrClB,IAAAA,gBAAgB,CAACwB,MAAM,IAAI;AACzBvB,MAAAA,KAAK,CAACqB,QAAN,CAAejB,gBAAgB,CAACmB,MAAD,CAA/B;AACD,KAFe,CAAhB;AAGD,GAJD;AAMAX,EAAAA,MAAM,CAACK,EAAP,CAAU,cAAV,EAAyB,MAAM;AAC7BT,IAAAA,eAAe,CAACY,IAAI,IAAI;AACtBpB,MAAAA,KAAK,CAACqB,QAAN,CAAef,oBAAoB,CAACc,IAAD,CAAnC;AACAX,MAAAA,gBAAgB,CAACW,IAAI,IAAI;AACvBpB,QAAAA,KAAK,CAACqB,QAAN,CAAed,qBAAqB,CAACa,IAAD,CAApC;AACD,OAFe,CAAhB;AAGD,KALc,CAAf;AAMD,GAPD;AAQD,CAtCM","sourcesContent":["import io from 'socket.io-client';\r\nimport  { serverIpAddress } from './../constanst';\r\nimport { getTables, getCurrentShift, getHistrotyTable } from './tables';\r\nimport { store } from './../App';\r\nimport { loadTables, setSectionTables, setCurrentShift, setHistoryTables } from './../Redux/actions/tables';\r\n\r\nimport { getTablesBySection } from './../Redux/selectors/tables';\r\n\r\nimport {loadCookingFoodItems, loadCompleteFoodItems} from './../Redux/actions/foodItems';\r\nimport {getCookingFoods, getCompleteFoods} from './foodItems';\r\n\r\nexport const initialSocket = (userId) => {\r\n  const socket = io.connect(serverIpAddress, {transports: [\"websocket\"], upgrade: false});\r\n  socket.emit('setUserId', userId);\r\n    \r\n  socket.on('tableUpdate', () => {\r\n    console.log('Talbe Updating');\r\n    getTables((data) => {\r\n      store.dispatch(loadTables(data));\r\n      store.dispatch(setSectionTables(\r\n        getTablesBySection(data, store.getState().tables.sectionTables[0].section)\r\n      ));\r\n    });\r\n  });\r\n    \r\n    socket.on('error', function (err) {\r\n        console.log(err);\r\n    });\r\n\r\n  socket.on('shiftUpdate', () => {\r\n    getCurrentShift((status) => {\r\n      store.dispatch(setCurrentShift(status));\r\n    })\r\n  })\r\n\r\n  socket.on('historyTablesUpdate', () => {\r\n    getHistrotyTable(tables => {\r\n      store.dispatch(setHistoryTables(tables))\r\n    })\r\n  })\r\n\r\n  socket.on('updateOrders',() => {\r\n    getCookingFoods(data => {\r\n      store.dispatch(loadCookingFoodItems(data));\r\n      getCompleteFoods(data => {\r\n        store.dispatch(loadCompleteFoodItems(data));\r\n      })\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}